import os
import sys
import lexer
import syntaxTree
import codeGeneration
from actionTree import parseConstants, parseFunctions,  parseVariables, parseBody, functions, constants, variables
import actionTree
from debugging import DebugFlags

def build(inputProgram: str) -> str:
    lexed = lexer.lex(inputProgram)
    if DebugFlags.showLexedTokens:
        print ("================= LEXED TOKENS =================")
        lexed.printOut()

    # create the abstract syntax tree
    ast = parseBody(lexed)
    if DebugFlags.showPreAST:
        print("================= PRE PROCESSED AST ======================")
        ast.printAll()


    # create the action tree
    parseConstants(ast)
    parseVariables(ast)
    parseFunctions(ast)

    if DebugFlags.showPostAST:
        print("================= POST PROCESSED AST ======================")
        # print the Action Tree
        ast.printAll()

    # add index for constants, variables, and functions.
    for i in range(max(max(len(variables), len(constants)), len(functions))):
        if not i in constants:
            constants.append(i)
    if DebugFlags.showConstantsLists:
        # make the variable index and constant index constants:
        print ("================= FUNCTIONS, CONSTANTS (pre-code generation), VARIABLES =================")
        print("Functions: ", functions)
        print("Constants: ", constants)
        print("Variables: ", variables)


    # crete code generation.
    return (codeGeneration.createCode(ast, actionTree.variables, actionTree.functions, actionTree.functionData, actionTree.constants))

# build("""

# func createName@string (nameParam@string, lastNameParam@string) {
#     var output@string;
#     output = nameParam + lastNameParam;
# }

# func main@int (returnStatus@int) {
#     var myName@string = "Eric";
#     var lastName@string = "Diskin";
#     var fullName@string = myName + lastName;

#     myName = createName(lastName, "Ilana");
#     print(fullName);
# }
# """, 0)

# build("""
# func main@int (param@string) {
#     print("Hello");
# }
# """, 0)


## an example if statement could be:

if __name__ == "__main__":
    fileName = ""
    if len(sys.argv) < 2:
        print("Please input an input file to run.")
        fileName = os.path.dirname(os.path.realpath(__file__)) + "/testProgram.starp"
    else:
        fileName = sys.argv[1]
        
    outputFile = open(fileName + ".starpCode", "w")
    with open(fileName, 'r') as f:
        outputtedAssembly = build(f.read())
        if DebugFlags.showBytecode:
            print("================== GENERATED BYTECODE ==================")
            print(outputtedAssembly)
        outputFile.write(outputtedAssembly)
    outputFile.close()